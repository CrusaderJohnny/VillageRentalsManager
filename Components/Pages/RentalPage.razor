@page "/rental"
@using Microsoft.Maui.Controls
@using VillageRentalsManager.Domain
@using VillageRentalsManager.Persistence
@inject ClientManager connection
@inject EquipmentManager connection2
@inject ReservationManager connection3

<h1>Create a Reservation</h1>
<div id="selectRentalEq">
    <label>
        Rental Id:
        <input @bind-value="rentalIdInput" readonly />
    </label>

    <label>
        Day Reserved:
        <input @bind-value="dayReserved" readonly />
    </label>
    <label>
        customerID:
        <input @bind-value="customerIdInput" readOnly />
    </label>
</div>
<div id="selectWheel">
    <select @bind="customerIdInput">
        @foreach (var clients in clientList)
        {
            <option value="@clients.CustomerID">@clients</option>
        }
    </select>
</div>

<label>
    Customer Last Name:
    <input @bind-value="cLastName" readonly />
</label>

<label>
    Equipment Id:
    <input @bind-value="equipmentIdSelection" readOnly />
</label>

<div id="selectWheel">
    <select @bind="equipmentIdSelection">
        @foreach (var equipment in equipmentList)
        {
            <option value="@equipment.EquipmentId">@equipment</option>
        }
    </select>
</div>

<label>
    Rental Start Date:
    <input @bind-value="startDateInput" asp-for="StartDate" type="date" />
</label>

<label>
    Rental End Date:
    <input @bind-value="endDateInput" asp-for="EndDate" type="date" />
</label>
<button class="btn btn-primary" @onclick="tally">Tally</button>
<button class="btn btn-primary" @onclick="AddEquipment">Save Reservation</button>

<h1>Equipment Selection</h1>

<table>
    <thead>
        <tr>
            <th>EquipmentId</th>
            <th>Rental Date</th>
            <th>Return Date</th>
            <th>Cost of Rental</th>
        </tr>
    </thead>
    <tbody>

        @if (rentalList != null)
        {
            @foreach (var tool in rentalList)
            {
                <tr>
                    <td>@tool.EquipmentId</td>
                    <td>@tool.StartDate</td>
                    <td>@tool.ReturnDate</td>
                    <td>@tool.EqCost</td>
                    <td>
                        <button class="btn btn-sm btn-danger">Remove Tool</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<label>
    Total Cost of Rental:
    <input @bind-value="totalCostOutput" readonly />
</label>



<div>
    @if (!string.IsNullOrEmpty(errMess))
    {
        <div class="alert alert-danger">@errMess</div>
    }
    @if (!string.IsNullOrEmpty(victoryMessage))
    {
        <div class="alert alertalert-success">@victoryMessage</div>
    }
</div>




@code {
    private string rentalIdInput { get; set; } = string.Empty;
    private int rentalRandomizer = 0;
    private string dayReserved = DateTime.Today.ToShortDateString();
    private string customerIdInput { get; set; } = string.Empty;
    private string customerId { get; set; } = string.Empty;
    private string cLastName { get; set; } = string.Empty;
    private string equipmentIdSelection { get; set; } = string.Empty;
    private DateTime startDateInput { get; set; } = DateTime.Today;
    private string rentalStartDate { get; set; } = string.Empty;
    private DateTime endDateInput { get; set; } = DateTime.Today;
    private string rentalEndDate { get; set; } = string.Empty;
    private double equipmentCost { get; set; } = 0.00;
    private double totalCostOutput { get; set; }
    private string? errMess;
    private string? victoryMessage;
    private List<Client> clientList = new List<Client>();
    private List<Equipment> equipmentList = new List<Equipment>();
    private string? _customerSelect;
    private string? _equipmentSelect;
    private Client selectedClient;
    private Equipment selectedEquipment;
    private double days;
    private List<Reservation> rentalList = new List<Reservation>();
    string? customerSelect
    {
        get
        {
            return _customerSelect;
        }
        set
        {
            _customerSelect = value; FindClient(); cLastName = selectedClient.LastName;
        }
    }




    protected override async Task OnInitializedAsync()
    {
        rentalIdInput = "0";
        customerIdInput = "Any";
        cLastName = "Blank";
        equipmentCost = 0.00;
        totalCostOutput = 0.00;
        clientList = await connection.GetAllClientsAsync();
        equipmentList = await connection2.GetAllEquipmentAvaiAsync();
        selectedClient = new Client();
        selectedEquipment = new Equipment();

    }

    private async Task FindClient()
    {
        selectedClient = await connection.GetAClientAsync(Int32.Parse(customerIdInput));
    }
    private async Task tally()
    {
        try
        {
            int equipmentId = Int32.Parse(equipmentIdSelection);
            Equipment eqItem = await connection2.GetASingleEquipmentAsync(equipmentId);
            equipmentCost = eqItem.DailyRate;
            days = (endDateInput - startDateInput).TotalDays;
            totalCostOutput = days * equipmentCost;

        }
        catch(Exception ex)
        {
            errMess = ex.Message;
        }


    }
    protected async Task AddEquipment()
    {
        Reservation rental = new Reservation
            {
                RentalId = rentalRandomizer,
                Date = dayReserved,
                CustomerId = Int32.Parse(customerIdInput),
                LastName = cLastName,
                EquipmentId = Int32.Parse(equipmentIdSelection),
                EqCost = equipmentCost,
                StartDate = startDateInput.ToShortDateString(),
                ReturnDate = endDateInput.ToShortDateString(),                
                TotalCost = totalCostOutput,
            };
        await connection3.InsertReservationAsync(rental);
        victoryMessage = $"Succusfully added {rental}";
        rentalIdInput = "0";
        customerIdInput = "Any";
        cLastName = "Blank";
        equipmentIdSelection = "Blank";
        equipmentCost = 0.00;
        totalCostOutput = 0.00;
    }

}
